<?xml version="1.0"?>
<launch>
    <arg name="front_lidar_ip"        default="192.168.1.3" />
    <arg name="back_lidar_ip"         default="192.168.1.4" />
    <arg name="common_modbus_ip"      default="192.168.1.110" />
    <arg name="robot_name"            default="$(env ROBOT_NAME)" />
    <arg name="base_frame"            default="base_link" />
    <arg name="output"                default="screen" />
    <arg name="ws_port"               default="9090"/>
    <arg name="pub_tf"                default="true"/>
    <arg name="sound_device"          default="" />
    <arg name="sound_loop_rate"       default="100" />
    <arg name="marker_size"           default="11.45" />
	<arg name="max_new_marker_error"  default="0.02" />
	<arg name="max_track_error"       default="0.5" />
	<arg name="cam_image_topic"       default="front/zed/rgb_raw/image_raw_color" />
	<arg name="cam_info_topic"        default="front/zed/rgb_raw/camera_info" />
	<arg name="output_frame"          default="camel_amr_1000_001/base_link" />
    
    <!-- Robot Description -->
    <param name="use_gui" value="false" />
    <param name="robot_description" command="$(find xacro)/xacro '$(find camel_urdf)/urdf/CAMEL-1000.urdf.xacro'  robot_model:=$(arg robot_name)
    base_frame:=base_footprint"/>

    <!-- Robot State  -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="$(arg output)"/>
    <!-- Joint State -->
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" respawn="true" output="$(arg output)"/>
    


    <!-- SICK lidars launch -->
    <!-- Front Lidar -->
    <node name="sick" pkg="sick_scan" type="sick_generic_caller" respawn="false" output="$(arg output)" ns="front_lidar" required='true'>
        <param name="intensity" type="bool" value="False"/>
        <param name="intensity_resolution_16bit" type="bool" value="false"/>
        <param name="min_ang" type="double" value="-2.32619"/>
        <param name="max_ang" type="double" value="2.35619"/>
        <param name="frame_id" type="str" value="$(arg robot_name)/front_lidar"/>
        <param name="use_binary_protocol" type="bool" value="true"/>
        <param name="scanner_type" type="string" value="sick_lms_1xx"/>
        <param name="range_max" type="double" value="20.0"/>
        <param name="hostname" type="string" value="$(arg front_lidar_ip)"/>
        <param name="port" type="string" value="2112"/>
        <param name="timelimit" type="int" value="5"/>
        <param name="start_services" type="bool" value="false"/>
        <param name="activate_lferec" type="bool" value="false"/>
        <param name="activate_lidoutputstate" type="bool" value="false"/> 
        <param name="activate_lidinputstate" type="bool" value="false"/> 
        <param name="min_intensity" type="double" value="0.0"/>
        <param name="ang_res" type="double" value="0.25"  />
        <param name="scan_freq" type="double" value="25" />
    </node> 

    <!-- Back Lidar -->
    <node name="sick" pkg="sick_scan" type="sick_generic_caller" respawn="false" output="$(arg output)" ns="back_lidar" required='true'>
        <param name="intensity" type="bool" value="False"/>
        <param name="intensity_resolution_16bit" type="bool" value="false"/>
        <param name="min_ang" type="double" value="-2.35619"/>
        <param name="max_ang" type="double" value="2.35619"/>
        <param name="frame_id" type="str" value="$(arg robot_name)/back_lidar"/>
        <param name="use_binary_protocol" type="bool" value="true"/>
        <param name="scanner_type" type="string" value="sick_lms_1xx"/>
        <param name="range_max" type="double" value="20.0"/>
        <param name="hostname" type="string" value="$(arg back_lidar_ip)"/>
        <param name="port" type="string" value="2112"/>
        <param name="timelimit" type="int" value="5"/>
        <param name="start_services" type="bool" value="false"/>
        <param name="activate_lferec" type="bool" value="false"/>
        <param name="activate_lidoutputstate" type="bool" value="false"/> 
        <param name="activate_lidinputstate" type="bool" value="false"/> 
        <param name="min_intensity" type="double" value="0.0"/> 
        <param name="ang_res" type="double" value="0.25"  />
        <param name="scan_freq" type="double" value="25" />
        
    </node>

    <!-- Two lidars merger -->
    
    <node pkg="ira_laser_tools" name="scan_merger" type="laserscan_multi_merger" output="$(arg output)">
        <param name="destination_frame" value="$(arg robot_name)/laser"/>
        <param name="cloud_destination_topic" value="/$(arg robot_name)/merged_cloud"/>
        <param name="scan_destination_topic" value="/$(arg robot_name)/scan"/>
        <param name="laserscan_topics" value ="/$(arg robot_name)/front_lidar/scan /$(arg robot_name)/back_lidar/scan" /> 
        <param name="angle_min" value="-3.14159265359"/>
        <param name="angle_max" value="3.14159265359"/>
        <param name="angle_increment" value="0.002181662"/>
        <param name="scan_time" value="0.03999999910593033"/>
        <param name="range_min" value="0.05"/>
        <param name="range_max" value="20.0"/>
    </node>
    

    <!-- I/O module -->
    <!-- for common i/o  -->
    <node pkg="camel_robot" name="modbus" type="modbus.py" output="$(arg output)" ns="common" required='true'>
        <param name="ip_address" value="$(arg common_modbus_ip)"/>
        <param name="port" value="5020"/>
        <param name="rate" value="20"/>
    </node> 
    
    <!-- Roboteq drivers -->
    <!-- bms -->
    <node name="bms"  pkg="roboteq_bms" type="roboteq_bms.py"  output="$(arg output)"  required='true'>
        <param name="port"         value="/dev/RoboteqBMS"/>
        <param name="baud"         value="115200"/>
        <param name="desired_freq" value="2"/>
    </node>
   
    <!-- motor driver -->
    <node name = "driver" pkg = "roboteq_motor_controller_driver" type = "roboteq_motor_controller_driver_node" output="$(arg output)" required='true'>
        <rosparam command="load" file="$(find camel_robot)/config/bringup/motor_driver_config.yaml" />
        <param name="port"  value="/dev/RoboteqDriver"/>
        <param name="baud"  value="115200"/>
    </node>

    <!-- encoder odometry -->
    <node name = "encoder" pkg = "roboteq_motor_controller_driver" type = "diff_odom" output="$(arg output)" required='true'>
        <rosparam command="load" file="$(find camel_robot)/config/bringup/odom_encoder_config.yaml" />
        <param name="base_frame"            value="$(arg robot_name)/base_link"/>
        <param name="odom_frame"            value="$(arg robot_name)/odom"/>
        <param name="encoder_topic_name"   value="/$(arg robot_name)/driver/encoder_count" />
        <param name="command_srv"          value="/$(arg robot_name)/driver/dualchannel_command_service" />
        <param name="publish_tf"           value="false" /> <!-- Debug only -->
    </node>


    <!-- ZED Camera -->
    <!-- Front ZED2 -->
    <node name="zed" pkg="zed_wrapper" type="zed_wrapper_node" output="$(arg output)" ns="front" required="true">
        <rosparam file="$(find camel_robot)/config/bringup/zed2_front_config.yaml" command="load" />
        <rosparam file="$(find camel_robot)/config/bringup/zed2_common_config.yaml" command="load" />
        <param name="general/camera_name"               value="$(arg robot_name)/zed_front" />
        <param name="general/base_frame"                value="$(arg robot_name)/$(arg base_frame)" />
        <param name="svo_file"                          value="" />
        <param name="stream"                            value="" />
        <param name="general/zed_id"                    value="0" />
        <param name="general/gpu_id"                    value="-1" />
        <param name="general/serial_number"             value="29520794" />
        <param name="pos_tracking/odometry_frame"       value="$(arg robot_name)/odom"/>
    </node>

    <!-- Back ZED2 -->
    <node name="zed" pkg="zed_wrapper" type="zed_wrapper_node" output="$(arg output)" ns="back" required="true">
        <rosparam file="$(find camel_robot)/config/bringup/zed2_back_config.yaml" command="load" />
        <rosparam file="$(find camel_robot)/config/bringup/zed2_common_config.yaml" command="load" />
        <param name="general/camera_name"               value="$(arg robot_name)/zed_back" />
        <param name="general/base_frame"                value="$(arg robot_name)/$(arg base_frame)" /> 
        <param name="svo_file"                          value="" />
        <param name="stream"                            value="" />
        <param name="general/zed_id"                    value="1" />
        <param name="general/gpu_id"                    value="-1" />
        <param name="general/serial_number"             value="21229143" />
    </node>

     <node pkg="pointcloud_to_laserscan" type="pointcloud_to_laserscan_node" name="pointcloud_to_laserscan">
        <remap from="cloud_in" to="/camel_amr_1000_001/front/zed/point_cloud/cloud_registered"/>
        <remap from="scan" to="points/scan"/>
        <rosparam command="load" file="$(find camel_robot)/config/bringup/point_to_laser_config.yaml"/>
    </node>


    <node pkg="robot_localization" type="ekf_localization_node" name="ekf_se" clear_params="true" output="$(arg output)">
        <rosparam command="load" file="$(find camel_robot)/config/slam/ekf_localization_config.yaml" />

        <param name="odom_frame" value="$(arg robot_name)/odom"/>
        <param name="base_link_frame" value="$(arg robot_name)/base_footprint"/>
        <param name="world_frame" value="$(arg robot_name)/odom"/>

        <param name="odom0" value="/$(arg robot_name)/encoder/odom"/> 
        <param name="odom0_queue_size" value="2"/>

        <param name="imu0" value="/$(arg robot_name)/front/zed/imu/data"/> 
        <param name="imu0_queue_size" value="5"/>
    
        <remap from="/$(arg robot_name)/odometry/filtered" to="/$(arg robot_name)/odometry"/>
        <remap from="/$(arg robot_name)/accel/filtered" to="/$(arg robot_name)/accel"/>

    </node>


    <!-- Hooks Service-->
    <node pkg="camel_robot" name="hook_service" type="hook_service.py" output="$(arg output)"  required='true' ns="common"/>

    <!-- Battery and Charger Control-->
    <node pkg="camel_robot" name="battery_charger_control" type="battery_charger_control.py" output="$(arg output)"  required='true'/>

    <!-- Light Control-->
    <node pkg="camel_robot" name="light_control" type="Light_control.py" output="$(arg output)"  required='true' ns="common"/>
    
    <!-- Light Service-->   
    <node pkg="camel_robot" name="light_service" type="Light_service.py" output="$(arg output)"  required='true' ns="common"/>

    <!-- Robot Status-->
    <node pkg="camel_robot" name="robot_status" type="robot_status.py" output="$(arg output)"  required='true'/>

    <!-- Goal finished signal-->
    <node pkg="camel_robot" name="robot_sound_and_light" type="robot_sound_and_light.py" output="$(arg output)"  required='true'/>

    <!-- Motion Control-->
    <node pkg="camel_robot" name="motion_control" type="motion_control.py" output="$(arg output)"  required='true' ns="common">
        <rosparam command="load" file="$(find camel_robot)/config/robot_control/motion_control.yaml" />
    </node> 
    
    <!-- Robot Sound-->
    <node name="soundplay_node" pkg="sound_play" type="soundplay_node.py">
        <param name="device" value="$(arg sound_device)" />
        <param name="loop_rate" value="$(arg sound_loop_rate)" />
    </node>

    <node pkg="camel_robot" name="robot_sound_service" type="robot_sound_service.py" output="$(arg output)"  required='true'/>

    <!-- DualShock4 -->
    <node pkg="ds4_driver" type="ds4_driver_node.py" name="ds4_driver" output="$(arg output)" >
        <param name="backend" value="bluetooth" />
        <param name="device_addr" value="" />
        <param name="use_standard_msgs" value="false"/>
    </node>
    <node pkg="ds4_driver" type="ds4_twist_node.py" name="ds4_twist" output="$(arg output)" >
        <rosparam command="load" file="$(find camel_robot)/config/bringup/ds4_2dof_config.yaml" />
        <param name="stamped" value="false" />
    </node>

    

    <!-- Multimaster -->
    <!-- Multimaster Discovery -->
    <!-- <node name="master_discovery" pkg="fkie_master_discovery" type="master_discovery" output="$(arg output)">
        <rosparam command="load" file="$(find camel_robot)/config/bringup/master_disc_config.yaml"/>
    </node> -->

    <!-- Multimaster Sync -->
    <!-- <node name="master_sync" pkg="fkie_master_sync" type="master_sync" output="$(arg output)">
        <rosparam command="load" file="$(find camel_robot)/config/bringup/master_sync_config.yaml"/>
    </node> -->
    
    
    <!-- Rosbridge Websocket -->
    <node name="rosbridge_websocket" pkg="rosbridge_server" type="rosbridge_websocket" output="$(arg output)">
        <rosparam command="load" file="$(find camel_robot)/config/bringup/rosbridge_ws_config.yaml"/>
        <param name="port" value="$(arg ws_port)"/>
        <!-- <param name="address" value="$(env HOSTNAME)"/> -->
        <param name="address" value="$(env ROS_IP)"/>
        <rosparam command="load" file="$(find camel_robot)/config/bringup/rosbridge_glob_config.yaml"/>
    </node>

    <node name="rosapi" pkg="rosapi" type="rosapi_node" output="$(arg output)">
        <rosparam command="load" file="$(find camel_robot)/config/bringup/rosbridge_glob_config.yaml"/>
    </node>
    
</launch>