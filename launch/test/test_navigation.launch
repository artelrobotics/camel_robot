<?xml version="1.0"?>

<launch>
    <!-- ****************** Arguments ******************** -->
    <arg name="robot_name"            default="$(env ROBOT_NAME)" />
    <arg name="base_frame"            default="base_footprint" />
    <arg name="output"                default="log" />
    <arg name="local_planner_type"    default="base"   doc="[base, dwa, teb]"/>
    <arg name="mb"                    default="true" />
    <arg name="with_virtual_walls"    default="false" doc="Enables usage of virtual walls when set. Set to false when running SLAM." />
    <arg name="map_name"              default=""/>
    <arg name="navigation_map_file"   default="$(arg map_name).yaml"/>
    <arg name="virtual_map_file"      default="$(arg map_name)_virtual.yaml"/>
    <arg name="marker_size"           default="11.45" />
	<arg name="max_new_marker_error"  default="0.02" />
	<arg name="max_track_error"       default="0.5" />
	<arg name="cam_image_topic_front" default="/camel_amr_1000_001/front/zed/rgb_raw/image_raw_color" />
	<arg name="cam_info_topic_front"  default="/camel_amr_1000_001/front/zed/rgb_raw/camera_info" />
	<arg name="output_frame"          default="/camel_amr_1000_001/base" />
    <arg name="cam_image_topic_back"  default="/camel_amr_1000_001/back/zed/rgb_raw/image_raw_color" />
	<arg name="cam_info_topic_back"   default="/camel_amr_1000_001/back/zed/rgb_raw/camera_info" />
	
    

    <!-- ************************ Map Server ************************* -->
    <node name="map_server" pkg="map_server" type="map_server" args="$(arg navigation_map_file)" required='true'>
    <param name="frame_id" value="$(arg robot_name)/map"/>
    </node>

    <!-- ************************ Virtual Map Server ************************* -->
    <group if="$(arg with_virtual_walls)">
        <node name="virtual_map_server" pkg="map_server" type="map_server" args="$(arg virtual_map_file)" required='true'>
            <param name="frame_id" value="$(arg robot_name)/map"/>
            <remap from="map" to="virtual_map"/>
        </node>
    </group>

    <!-- ********************* AMCL ************************* -->
    <include file="$(find camel_robot)/launch/navigation/amcl.launch">
        <arg name="robot_name"            value="$(env ROBOT_NAME)" />
        <arg name="base_frame"            value="$(arg base_frame)" />
        <arg name="output"                value="$(arg output)" />
        <arg name="gui_publish_rate"      value="5.0" />
    </include>

    <node pkg="camel_robot" name="initial_pose_saver" type="amcl_initial_pose_save.py" output="$(arg output)"  required='true'/>
    <node pkg="camel_robot" name="goal_saver" type="goal_pose_saver_service.py" output="$(arg output)"  required='true'/>

    <group if="$(arg mb)">
        <node pkg="move_base" type="move_base" respawn="true" name="move_base" output="$(arg output)" >
            <rosparam file="$(find camel_robot)/config/navigation/costmap_common_config.yaml" command="load" ns="global_costmap" subst_value="true" />
            <rosparam file="$(find camel_robot)/config/navigation/costmap_common_config.yaml" command="load" ns="local_costmap" subst_value="true" />
            <rosparam file="$(find camel_robot)/config/navigation/local_costmap_config.yaml"  command="load" />
            <rosparam file="$(find camel_robot)/config/navigation/global_costmap_config.yaml" command="load" />
            <rosparam file="$(find camel_robot)/config/navigation/$(arg local_planner_type)_local_planner_config.yaml" command="load"/>
            <rosparam file="$(find camel_robot)/config/navigation/costmap_converter_config.yaml" command="load" />
            <rosparam file="$(find camel_robot)/config/navigation/move_base_config.yaml" command="load" />
            <rosparam file="$(find camel_robot)/config/navigation/global_planner_config.yaml" command="load"/>
            <rosparam file="$(find camel_robot)/config/navigation/costmap_global_params_plugins_virtual_walls.yaml" command="load" if="$(arg with_virtual_walls)" />
            <param name="base_global_planner" value="global_planner/GlobalPlanner" />
            <remap from="/$(arg robot_name)/odom" to="/$(arg robot_name)/odometry"/>
        </node> 
    </group>



    <!-- Aruco detection front camera -->
    <node name="ar_track_alvar_front" pkg="ar_track_alvar" type="individualMarkersNoKinect" respawn="false" output="screen" ns="front">
		<param name="marker_size"           type="double" value="$(arg marker_size)" />
		<param name="max_new_marker_error"  type="double" value="$(arg max_new_marker_error)" />
		<param name="max_track_error"       type="double" value="$(arg max_track_error)" />
		<param name="output_frame"          type="string" value="$(arg output_frame)" />
		<remap from="camera_image"  to="$(arg cam_image_topic_front)" />
		<remap from="camera_info"   to="$(arg cam_info_topic_front)" />

	</node>

     <!-- Aruco detection backward camera-->
    <node name="ar_track_alvar_back" pkg="ar_track_alvar" type="individualMarkersNoKinect" respawn="false" output="screen" ns="back">
		<param name="marker_size"           type="double" value="$(arg marker_size)" />
		<param name="max_new_marker_error"  type="double" value="$(arg max_new_marker_error)" />
		<param name="max_track_error"       type="double" value="$(arg max_track_error)" />
		<param name="output_frame"          type="string" value="$(arg output_frame)" />
		<remap from="camera_image"  to="$(arg cam_image_topic_back)" />
		<remap from="camera_info"   to="$(arg cam_info_topic_back)" />
	</node>
    <!-- Docking Service-->
    <node pkg="camel_robot" name="Docking_service" type="parking.py" output="$(arg output)"  required='true'/>

    <!-- Obstacle Detector -->
    <!-- <include file="$(find obstacle_detector)/launch/nodes.launch"/> -->
 
    <node name="scans_merger" pkg="obstacle_detector" type="scans_merger_node">
        <param name="active"            value="true"/>
        <param name="publish_scan"      value="true"/>
        <param name="publish_pcl"       value="true"/>

        <param name="ranges_num"        value="1000"/>

        <param name="min_scanner_range" value="0.05"/>
        <param name="max_scanner_range" value="5.0"/>

        <param name="min_x_range"       value="0.5"/>
        <param name="max_x_range"       value="1.5"/>
        <param name="min_y_range"       value="-1.0"/>
        <param name="max_y_range"       value="1.0"/>

        <param name="fixed_frame_id"   value="camel_amr_1000_001/map"/>
        <param name="target_frame_id"   value="camel_amr_1000_001/laser"/>
        <remap from="front_scanner" to="camel_amr_1000_001/front_lidar/scan"/>
        <remap from="rear_scanner" to="camel_amr_1000_001/back_lidar/scan"/>
    </node>

    <node name="obstacle_extractor" pkg="obstacle_detector" type="obstacle_extractor_node">
        <param name="active"               value="true"/>
        <param name="use_scan"             value="true"/>
        <param name="use_pcl"              value="true"/>

        <param name="use_split_and_merge"    value="true"/>
        <param name="circles_from_visibles"  value="true"/>
        <param name="discard_converted_segments" value="true"/>
        <param name="transform_coordinates"  value="true"/>

        <param name="min_group_points"     value="5"/>

        <param name="max_group_distance"   value="0.1"/>
        <param name="distance_proportion"  value="0.00628"/>
        <param name="max_split_distance"   value="0.2"/>
        <param name="max_merge_separation" value="0.2"/>
        <param name="max_merge_spread"     value="0.2"/>
        <param name="max_circle_radius"    value="0.45"/>
        <param name="radius_enlargement"   value="0.3"/>

        <param name="frame_id"             value="camel_amr_1000_001/base_link"/>
    </node>

    <node name="obstacle_tracker" pkg="obstacle_detector" type="obstacle_tracker_node">
        <param name="active"                  value="false"/>

        <param name="loop_rate"               value="100.0"/>
        <param name="tracking_duration"       value="2.0"/>
        <param name="min_correspondence_cost" value="0.6"/>
        <param name="std_correspondence_dev"  value="0.15"/>
        <param name="process_variance"        value="0.1"/>  
        <param name="process_rate_variance"   value="0.1"/>  
        <param name="measurement_variance"    value="1.0"/> 

        <param name="frame_id"                value="camel_amr_1000_001/map"/>

        <remap from="tracked_obstacles" to="obstacles"/>
    </node>
    
    <node name="obstacle_publisher" pkg="obstacle_detector" type="obstacle_publisher_node">
        <param name="active"           value="true"/>
        <param name="reset"            value="false"/>

        <param name="fusion_example"   value="false"/>
        <param name="fission_example"  value="false"/>

        <param name="loop_rate"        value="10.0"/>
        <param name="radius_margin"    value="0.25"/>

        <rosparam param="x_vector">[-3.0, -2.5, -2.5, -1.0, -1.0, -0.5, 2.5, 0.2, 2.0, 4.5, 4.0, 1.5]</rosparam>
        <rosparam param="y_vector">[1.5, 0.0, -2.5, 3.0, 1.0, -4.0, -3.0, -0.9, 0.0, 0.0, 2.0, 2.0]</rosparam>
        <rosparam param="r_vector">[0.5, 0.5, 1.5, 0.5, 0.7, 0.5, 1.5, 0.7, 0.7, 1.0, 0.5, 1.0]</rosparam>
        <rosparam param="vx_vector">[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]</rosparam>
        <rosparam param="vy_vector">[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]</rosparam>

        <param name="frame_id"         value="camel_amr_1000_001/map"/>
    </node>


    <node pkg="camel_robot" type="tf_to_pose.py" name="tf_to_pose" output="$(arg output)" >
        <param name="rate"  value="10" />
        <param name="child_frame" value="$(arg robot_name)/base_footprint" />
        <param name="parrent_frame" value="$(arg robot_name)/map" />
    </node>
   
    
</launch>
