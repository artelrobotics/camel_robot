<?xml version="1.0"?>
<launch>
    <arg name="front_lidar_ip"        default="192.168.1.3" />
    <arg name="back_lidar_ip"         default="192.168.1.4" />
    <arg name="common_modbus_ip"      default="192.168.1.100" />
    <arg name="robot_name"            default="$(env ROBOT_NAME)" />
    <arg name="base_frame"            default="base_footprint" />
    <arg name="output"                default="screen" />
    <arg name="ws_port"               default="9090"/>


    <!-- Robot Description -->
    <param name="use_gui" value="false" />
    <param name="robot_description" command="$(find xacro)/xacro '$(find camel_urdf)/urdf/CAMEL-500.urdf.xacro'  robot_model:=$(arg robot_name)
    base_frame:=$(arg base_frame)"/>

    <!-- Joint State -->
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" respawn="true" output="$(arg output)"/>
    <!-- Robot State  -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="$(arg output)"/>


    <!-- SICK lidars launch -->
    <include file="$(find camel_robot)/launch/bringup/sick_lidars.launch">
        <arg name="front_lidar_ip"        value="$(arg front_lidar_ip)" />
        <arg name="back_lidar_ip"         value="$(arg back_lidar_ip)" />
        <arg name="robot_name"            value="$(env ROBOT_NAME)" />
        <arg name="base_frame"            value="$(arg base_frame)" />
        <arg name="output"                value="$(arg output)" />
    </include>
    

    <!-- I/O module -->
    <!-- for common i/o  -->
    <!-- <node pkg="ethernet_remote_io_module" name="modbus" type="modbus_node.py" output="$(arg output)" ns="common" required='true'>
        <param name="ip_address" value="$(arg common_modbus_ip)"/>
        <param name="port" value="502"/>
        <param name="rate" value="10"/>
    </node>  -->

    <!-- drivers -->
    <include file="$(find camel_robot)/launch/bringup/drivers.launch">
        <arg name="robot_name"            value="$(env ROBOT_NAME)" />
        <arg name="base_frame"            value="$(arg base_frame)" />
        <arg name="output"                value="$(arg output)" />
    </include>


    <!-- ZED Cameras -->
    <include file="$(find camel_robot)/launch/bringup/zed_cameras.launch">
        <arg name="robot_name"            value="$(env ROBOT_NAME)" />
        <arg name="base_frame"            value="$(arg base_frame)" />
        <arg name="output"                value="$(arg output)" />
    </include>
    
    <!-- Depth Image to Laser Scan Node -->
    <node name="depthimage_to_laserscan" pkg="depthimage_to_laserscan" type="depthimage_to_laserscan" args="">
        <remap from="image"       to="/$(arg robot_name)/front/zed2/depth/depth_registered"/> 
        <remap from="camera_info" to="/$(arg robot_name)/front/zed2/depth/camera_info"/> 
        <param name="scan_height"     type="int"    value="80"/>
        <param name="scan_time"       type="double" value="0.066"/> 
        <param name="range_min"       type="double" value="0.05"/> 
        <param name="range_max"       type="double" value="2.0"/> 
        <param name="output_frame_id" type="str"    value="$(arg robot_name)/zed_front_camera_center"/> 
        <remap from="scan"            to="/$(arg robot_name)/depth/scan"/> 
    </node>

    <!-- EKF Robot Localization -->
    <node pkg="robot_localization" type="ekf_localization_node" name="ekf_se" clear_params="true" output="$(arg output)">
        <rosparam command="load" file="$(find camel_robot)/config/slam/ekf_localization_config.yaml" />

        <param name="odom_frame" value="$(arg robot_name)/odom"/>
        <param name="base_link_frame" value="$(arg robot_name)/$(arg base_frame)"/>
        <param name="world_frame" value="$(arg robot_name)/odom"/>

        <param name="odom0" value="/$(arg robot_name)/encoder/odom"/> 
        <param name="odom0_queue_size" value="2"/>

        <param name="imu0" value="/$(arg robot_name)/front/zed/imu/data"/> 
        <param name="imu0_queue_size" value="5"/>
    
        <remap from="/$(arg robot_name)/odometry/filtered" to="/$(arg robot_name)/odometry"/>
        <remap from="/$(arg robot_name)/accel/filtered" to="/$(arg robot_name)/accel"/>

    </node>


    <!-- Multimaster -->
    <!-- Multimaster Discovery -->
    <!-- <node name="master_discovery" pkg="fkie_master_discovery" type="master_discovery" output="$(arg output)">
        <rosparam command="load" file="$(find camel_robot)/config/bringup/master_disc_config.yaml"/>
    </node> -->

    <!-- Multimaster Sync -->
    <!-- <node name="master_sync" pkg="fkie_master_sync" type="master_sync" output="$(arg output)">
        <rosparam command="load" file="$(find camel_robot)/config/bringup/master_sync_config.yaml"/>
    </node> -->
    
    
    <!-- Rosbridge Websocket -->
    <node name="rosbridge_websocket" pkg="rosbridge_server" type="rosbridge_websocket" output="$(arg output)">
        <rosparam command="load" file="$(find camel_robot)/config/bringup/rosbridge_ws_config.yaml"/>
        <param name="port" value="$(arg ws_port)"/>
        <param name="address" value="$(env HOSTNAME)"/>
        <rosparam command="load" file="$(find camel_robot)/config/bringup/rosbridge_glob_config.yaml"/>
    </node>

    <node name="rosapi" pkg="rosapi" type="rosapi_node" output="$(arg output)">
        <rosparam command="load" file="$(find camel_robot)/config/bringup/rosbridge_glob_config.yaml"/>
    </node>

</launch>